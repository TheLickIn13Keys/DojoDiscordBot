import { Prompt } from './Prompt';
import { PromptNode } from './PromptNode';
import { ChannelInterface } from './interfaces/Channel';
import { MessageInterface } from './interfaces/Message';
export declare class PromptRunner<DataType, MessageType extends MessageInterface> {
    initialData: DataType;
    readonly ran: Array<Prompt<DataType, MessageType>>;
    constructor(initialData: DataType);
    /**
     * Checks whether the tree of nodes is valid. A valid tree
     * is one all children has a condition if there 2 or more
     * children.
     *
     * @param prompt Root prompt
     */
    static valid<DataType, MessageType extends MessageInterface>(prompt: PromptNode<DataType, MessageType>, seen?: Set<PromptNode<DataType, MessageType>>): boolean;
    /**
     * Returns the index of a prompt that have been executed
     * by this PromptRunner already
     *
     * @param prompt
     */
    indexOf(prompt: Prompt<DataType, MessageType>): number;
    /**
     * Returns the indexes of prompts that have been executed by
     * this PromptRunner already
     *
     * @param prompts Prompts to check index of
     * @returns {Array<number>} Array of indices
     */
    indexesOf(prompts: Array<Prompt<DataType, MessageType>>): Array<number>;
    /**
     * Get the first node whose condition passes, given this
     * runner's initial data
     *
     * @param nodes Array of prompt nodes
     */
    getFirstNode(nodes: Array<PromptNode<DataType, MessageType>>): Promise<PromptNode<DataType, MessageType> | null>;
    /**
     * Validate the node prompt and all its children before
     * executing
     *
     * @param rootNode Root prompt node
     * @param channel Channel to run the prompt in
     */
    run(rootNode: PromptNode<DataType, MessageType>, channel: ChannelInterface<MessageType>): Promise<DataType>;
    /**
     * Get the first node whose condition passes, and run
     * it
     *
     * @param rootNode Root prompt node
     * @param channel Channel to run the root prompt node
     */
    runArray(rootNode: Array<PromptNode<DataType, MessageType>>, channel: ChannelInterface<MessageType>): Promise<DataType>;
    /**
     * Run the PromptNode without validating
     *
     * @param PromptNode Root prompt node
     * @param channel Channel
     */
    execute(rootNode: PromptNode<DataType, MessageType>, channel: ChannelInterface<MessageType>): Promise<DataType>;
}
