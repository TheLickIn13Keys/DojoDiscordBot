/// <reference types="node" />
import { Rejection } from './errors/Rejection';
import { EventEmitter } from 'events';
import { PromptResult } from './PromptResult';
import { MessageInterface } from './interfaces/Message';
import { VisualInterface } from './interfaces/Visual';
import { ChannelInterface } from './interfaces/Channel';
export declare type PromptFunction<DataType, MessageType extends MessageInterface> = (m: MessageType, data: DataType) => Promise<DataType>;
export interface PromptCollector<DataType, MessageType> extends EventEmitter {
    emit(event: 'reject', message: MessageType, error: Rejection): boolean;
    emit(event: 'accept', message: MessageType, data: DataType): boolean;
    emit(event: 'exit', message: MessageType): boolean;
    emit(event: 'inactivity'): boolean;
    emit(event: 'error', error: Error): boolean;
    emit(event: 'message', message: MessageType): boolean;
    emit(event: 'stop'): boolean;
    on(event: 'message', listener: (message: MessageType) => void): this;
    on(event: 'reject', listener: (message: MessageType, error: Rejection) => void): this;
    once(event: 'accept', listener: (message: MessageType, data: DataType) => void): this;
    once(event: 'exit', listener: (message: MessageType) => void): this;
    once(event: 'inactivity', listener: () => void): this;
    once(event: 'error', listener: (error: Error) => void): this;
    once(event: 'stop', listener: () => void): this;
}
export declare type VisualGenerator<DataType> = (data: DataType) => Promise<VisualInterface | VisualInterface[]>;
export declare abstract class Prompt<DataType, MessageType extends MessageInterface> {
    /**
     * Create a collector that is part of a prompt
     *
     * @param channel Channel to create the collector in
     * @param data Prompt data
     */
    abstract createCollector(channel: ChannelInterface<MessageType>, data: DataType): PromptCollector<DataType, MessageType>;
    /**
     * When a message is rejected, this function is additionally called
     *
     * @param error The Rejection error the message caused
     * @param message Message that was rejected
     * @param channel The channel of the current prompt
     * @param data The data of the current prompt
     */
    abstract onReject(error: Rejection, message: MessageType, channel: ChannelInterface<MessageType>, data: DataType): Promise<void>;
    readonly duration: number;
    readonly visualGenerator: VisualGenerator<DataType> | VisualInterface;
    readonly function?: PromptFunction<DataType, MessageType>;
    constructor(visualGenerator: VisualGenerator<DataType> | VisualInterface, f?: PromptFunction<DataType, MessageType>, duration?: number);
    /**
     * Returns the visual given the data
     *
     * @param data
     */
    getVisual(data: DataType): Promise<VisualInterface | VisualInterface[]>;
    /**
     * Handles timeout and messages of a message colllector
     *
     * @param emitter Message collector
     * @param func Prompt function
     * @param data Prompt data
     * @param duration Duration of collector before it emits inactivity
     */
    static handleCollector<DataType, MessageType extends MessageInterface>(emitter: PromptCollector<DataType, MessageType>, func: PromptFunction<DataType, MessageType>, data?: DataType, duration?: number): void;
    /**
     * Handle each individual message from a collector to determine
     * what event it should emit. Ignores all messages whose author
     * ID does not match the original message.
     *
     * @param emitter Message collector
     * @param message Collected message
     * @param func Prompt function
     * @param data Prompt data
     */
    static handleMessage<DataType, MessageType extends MessageInterface>(emitter: PromptCollector<DataType, MessageType>, message: MessageType, func: PromptFunction<DataType, MessageType>, data?: DataType): Promise<void>;
    /**
     * Send a visual
     *
     * @param visual The visual for channel.send to send
     * @param channel Channel to send the message to
     */
    sendVisual(visual: VisualInterface | VisualInterface[], channel: ChannelInterface<MessageType>): Promise<MessageType | MessageType[]>;
    /**
     * Send the visual generated by the visual generator
     *
     * @param message The MessageInterface before this prompt
     * @param data Data to generate the user's message
     */
    sendUserVisual(channel: ChannelInterface<MessageType>, data: DataType): Promise<MessageType | MessageType[]>;
    /**
     * Runs the Prompt function for every message collected.
     * Reject when channel send promise rejects.
     *
     * @param channel The channel to collect from
     * @param data The data before this prompt
     */
    collect(channel: ChannelInterface<MessageType>, data: DataType): Promise<PromptResult<DataType>>;
    /**
     * Send the user's visual and start collecting messages
     *
     * @param channel The channel to collect from
     * @param data Data before this prompt
     */
    run(channel: ChannelInterface<MessageType>, data: DataType): Promise<PromptResult<DataType>>;
}
