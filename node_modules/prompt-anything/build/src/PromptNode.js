"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const TreeNode_1 = require("./TreeNode");
class PromptNode extends TreeNode_1.TreeNode {
    /**
     * @param prompt Prompt to run
     * @param condition Condition for this node to run
     */
    constructor(prompt, condition) {
        super();
        this.prompt = prompt;
        this.condition = condition;
    }
    /**
     * Asserts that the children of this node are valid.
     * If a node has 2 or more children, then they must all
     * all have condition functions specified.
     */
    hasValidChildren() {
        const children = this.children;
        if (children.length <= 1) {
            return true;
        }
        // There are more 2 or more children - they must have conditions
        for (const child of children) {
            if (!child.condition) {
                return false;
            }
        }
        return true;
    }
    /**
   * Determine what the next prompt node is given data.
   *
   * @param data The data before this prompt
   */
    getNext(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const { children } = this;
            for (let i = 0; i < children.length; ++i) {
                const child = children[i];
                if (!child.condition || (yield child.condition(data))) {
                    return child;
                }
            }
            return null;
        });
    }
    /**
     * Sets the children of this node.
     *
     * @param nodes
     */
    setChildren(nodes) {
        this.children = nodes;
        return this;
    }
    /**
     * Push a new node to this node's children.
     *
     * @param node
     */
    addChild(node) {
        this.children.push(node);
        return this;
    }
}
exports.PromptNode = PromptNode;
