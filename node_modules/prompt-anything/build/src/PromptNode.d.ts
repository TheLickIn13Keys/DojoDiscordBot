import { Prompt } from "./Prompt";
import { TreeNode } from "./TreeNode";
import { MessageInterface } from "./interfaces/Message";
export declare type PromptNodeCondition<DataType> = (data: DataType) => Promise<boolean>;
export declare class PromptNode<DataType, MessageType extends MessageInterface> extends TreeNode<PromptNode<DataType, MessageType>> {
    prompt: Prompt<DataType, MessageType>;
    readonly condition?: PromptNodeCondition<DataType>;
    /**
     * @param prompt Prompt to run
     * @param condition Condition for this node to run
     */
    constructor(prompt: Prompt<DataType, MessageType>, condition?: PromptNodeCondition<DataType>);
    /**
     * Asserts that the children of this node are valid.
     * If a node has 2 or more children, then they must all
     * all have condition functions specified.
     */
    hasValidChildren(): boolean;
    /**
   * Determine what the next prompt node is given data.
   *
   * @param data The data before this prompt
   */
    getNext(data: DataType): Promise<PromptNode<DataType, MessageType> | null>;
    /**
     * Sets the children of this node.
     *
     * @param nodes
     */
    setChildren(nodes: Array<PromptNode<DataType, MessageType>>): this;
    /**
     * Push a new node to this node's children.
     *
     * @param node
     */
    addChild(node: PromptNode<DataType, MessageType>): this;
}
