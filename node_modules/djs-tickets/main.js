const Discord = require("discord.js");
const client = new Discord.Client({
  partials: ["MESSAGE", "USER", "REACTION"]
});
const enmap = require("enmap");
client.on("ready", () =>
  console.log(
    `[READY] ${client.user.tag} has been successfully booted up!`,
    client.user.setActivity(`in ${client.guilds.cache.size} servers `)
  )
);

const settings = new enmap({
  name: "settings",
  autoFetch: true,
  cloneLevel: "deep",
  fetchAll: true
});

client.on("ready", () => {
  console.log("ready");
});
let a;
let prefixbot= a || "!"

client.on("message", async message => {
  if (message.author.bot) return;
  if (message.content.indexOf(prefixbot) !== 0) return;

  const args = message.content
    .slice(prefixbot.length)
    .trim()
    .split(/ +/g);
  const command = args.shift().toLowerCase();

  if (command == "ticket-setup") {
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.reply(`Become a admin BOOMER`);
    let channel = message.mentions.channels.first();
    if (!channel) return message.reply("Usage: `tt!ticket-setup #channel`");
    const rle = message.guild.roles.cache.find(role => role.name === "Patrol");
    if (!rle)
      return message.reply(
        "Hmmm I coudl't find a role called `Patrol` Make sure you have a role called `Patrol` with same capitalisation and all you moderators are havingp it"
      );

    let sent = await channel.send(
      new Discord.MessageEmbed()
        .setTitle("Ticket System")
        .setDescription("React to open a ticket!")
        .setFooter("Ticket System")
        .setColor("00ff00")
    );

    sent.react("ðŸŽ«");
    settings.set(`${message.guild.id}-ticket`, sent.id);

    message.channel.send("Ticket System Setup Done!");
  }


if (command == "close") {
    if (!message.channel.name.includes("ticket-"))
      return message.channel.send("You cannot use that here!");
    let channel = message.channel
    channel.messages.fetch({limit:80})
    .then(function(messages) {
        let content = messages.map(message => message.content && message.content).join("\n");
        message.author.send(`Transcript for your ticket in ${message.guild.name} Server`);
        message.author.send({ files: [{ name: "test.txt", attachment: Buffer.from(content) }] });
      message.channel.send(`I have dmed you transcript if your dms are opened. Deleting channel in 20 seconds`)
      message.channel.send(`Just in case Your dms are closed here is transcript`)
      message.channel.send({ files: [{ name: "test.txt", attachment: Buffer.from(content) }] });  


      })
       setTimeout(function() {
        message.channel.delete();
                    }, 20000);
  }
});

client.on("messageReactionAdd", async (reaction, user, message) => {
  if (user.partial) await user.fetch();
  if (reaction.partial) await reaction.fetch();
  if (reaction.message.partial) await reaction.message.fetch();
  if (user.bot) return;

  let ticketid = await settings.get(`${reaction.message.guild.id}-ticket`);

  if (!ticketid) return;

  if (reaction.message.id == ticketid && reaction.emoji.name == "ðŸŽ«") {
    reaction.users.remove(user);

    reaction.message.guild.channels
      .create(`ticket-${user.username}`, {
        permissionOverwrites: [
          {
            id: user.id,
            allow: ["SEND_MESSAGES", "VIEW_CHANNEL"]
          },
          {
            id: reaction.message.guild.roles.everyone,
            deny: ["VIEW_CHANNEL"]
          },
          {
            id: reaction.message.guild.roles.cache.find(
              role => role.name === "Patrol"
            ),
            allow: ["SEND_MESSAGES", "VIEW_CHANNEL"]
          }
        ],
        type: "text"
      })
      .then(async channel => {
        channel.send(
          `<@${user.id}>`,
          new Discord.MessageEmbed()
            .setTitle("Welcome to your ticket!")
            .setDescription("Support Team will be with you shortly")
            .setColor("RANDOM")
        );
      });
  }
});
module.exports = {
  token: function token(string) {
  if (!string || typeof string !== "string") throw new TypeError("Expected a token, and it must be a string");
  try {
  client.login(string);
  } catch(err) {
  throw new Error("An error occurred when trying to login, error: " + err);
  }
  return client;
  },

    prefix: function prefix(string) {
    if (!string || typeof string !== "string" || string.length > 10) throw new TypeError("Expected a string and it's length must be between 1 to 10 So keeping prefix to ! by defauly");
   try{
    a = string;
    return prefix;
   }catch(err){
     throw new Error("AN error -" + err)
   }
    },
      status: function status(string) {
      if (!string || typeof string !== "string" || string.length > 20) throw new TypeError("Expected a string and it's length must be between 1 to 20");
    try{
      client.on("ready", () =>
      client.user.setActivity(string)
      )
    }catch(err){

      throw new Error("An error occurred when trying to set status, error: " + err);

    }
      return status;
      }
    }