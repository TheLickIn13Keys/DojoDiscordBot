"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscordChannel = void 0;
const MenuVisual_1 = require("./visuals/MenuVisual");
const MessageVisual_1 = require("./visuals/MessageVisual");
class DiscordChannel {
    constructor(channel) {
        this.messages = [];
        this.id = channel.id;
        this.channel = channel;
    }
    /**
     * Store all messages sent within this channel
     * @param message Message to store
     */
    storeMessages(message) {
        if (Array.isArray(message)) {
            message.forEach(m => this.messages.push(m));
        }
        else {
            this.messages.push(message);
        }
    }
    sendMenuVisual(visual) {
        return __awaiter(this, void 0, void 0, function* () {
            let options = Object.assign({}, DiscordChannel.DEFAULT_OPTIONS);
            if (visual.options) {
                options = Object.assign({}, visual.options);
            }
            options.embed = visual.menu.getEmbedOfPage(0);
            const sent = yield this.channel.send('', options);
            if (visual.menu.canPaginate()) {
                yield visual.menu.setUpPagination(sent);
            }
            return sent;
        });
    }
    sendMessageVisual(visual) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, DiscordChannel.DEFAULT_OPTIONS), visual.options);
            return this.channel.send(visual.text, options);
        });
    }
    send(visual) {
        return __awaiter(this, void 0, void 0, function* () {
            if (visual instanceof MenuVisual_1.MenuVisual) {
                const sent = yield this.sendMenuVisual(visual);
                this.storeMessages(sent);
                return sent;
            }
            else if (visual instanceof MessageVisual_1.MessageVisual) {
                const sent = yield this.sendMessageVisual(visual);
                this.storeMessages(sent);
                return sent;
            }
            else {
                throw new TypeError('Invalid visual format, must be MenuVisual or MessageVisual');
            }
        });
    }
}
exports.DiscordChannel = DiscordChannel;
DiscordChannel.DEFAULT_OPTIONS = {
    allowedMentions: {
        parse: []
    }
};
