"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DiscordPromptRunner_1 = require("../DiscordPromptRunner");
const DiscordChannel_1 = require("../DiscordChannel");
const prompt_anything_1 = require("prompt-anything");
const DiscordPrompt_1 = require("../DiscordPrompt");
const DiscordPromptNode_1 = require("../DiscordPromptNode");
jest.mock('../DiscordPrompt');
jest.mock('../DiscordChannel');
describe('Unit::DiscordPromptRunner', () => {
    describe('constructor', () => {
        it('works correctly', () => {
            const author = {
                id: 'q3ewt426ry'
            };
            const data = {
                dfgdfg: 'wsrg',
                __authorID: 'asewdgtr'
            };
            const runner = new DiscordPromptRunner_1.DiscordPromptRunner(author, data);
            expect(runner.initialData).toEqual(Object.assign(Object.assign({}, data), { __authorID: author.id }));
        });
    });
    describe('static addActiveChannel', () => {
        afterEach(() => {
            DiscordPromptRunner_1.DiscordPromptRunner.activeChannels = new Set();
        });
        it('adds the channel id', () => {
            const channelID = 'wseryh';
            DiscordPromptRunner_1.DiscordPromptRunner.addActiveChannel(channelID);
            expect(DiscordPromptRunner_1.DiscordPromptRunner.activeChannels.has(channelID))
                .toEqual(true);
        });
    });
    describe('static deleteActiveChannel', () => {
        afterEach(() => {
            DiscordPromptRunner_1.DiscordPromptRunner.activeChannels = new Set();
        });
        it('deletes the channel id', () => {
            const channelID = 'wseryh';
            DiscordPromptRunner_1.DiscordPromptRunner.activeChannels = new Set([channelID]);
            DiscordPromptRunner_1.DiscordPromptRunner.deleteActiveChannel(channelID);
            expect(DiscordPromptRunner_1.DiscordPromptRunner.activeChannels.has(channelID))
                .toEqual(false);
        });
    });
    describe('static isActiveChannel', () => {
        afterEach(() => {
            DiscordPromptRunner_1.DiscordPromptRunner.activeChannels = new Set();
        });
        it('returns whether if the channel is an active one', () => {
            const channelID = 'wseryh';
            DiscordPromptRunner_1.DiscordPromptRunner.activeChannels = new Set([channelID]);
            expect(DiscordPromptRunner_1.DiscordPromptRunner.isActiveChannel(channelID))
                .toEqual(true);
            DiscordPromptRunner_1.DiscordPromptRunner.activeChannels = new Set();
            expect(DiscordPromptRunner_1.DiscordPromptRunner.isActiveChannel(channelID))
                .toEqual(false);
        });
    });
    describe('convertTextChannel', () => {
        it('returns a DiscordChannel', () => {
            const textChannel = {
                a: 'b'
            };
            const returned = DiscordPromptRunner_1.DiscordPromptRunner.convertTextChannel(textChannel);
            expect(DiscordChannel_1.DiscordChannel).toHaveBeenCalledWith(textChannel);
            expect(returned).toBeInstanceOf(DiscordChannel_1.DiscordChannel);
        });
    });
    describe('run', () => {
        it('accepts a DiscordChannel', () => {
            const textChannel = {};
            const discordChannel = new DiscordChannel_1.DiscordChannel(textChannel);
            const runner = new DiscordPromptRunner_1.DiscordPromptRunner({}, {});
            const prompt = new DiscordPrompt_1.DiscordPrompt({ text: '' });
            const node = new DiscordPromptNode_1.DiscordPromptNode(prompt);
            const superRun = jest.spyOn(prompt_anything_1.PromptRunner.prototype, 'run')
                .mockImplementation();
            runner.run(node, discordChannel);
            expect(superRun).toHaveBeenCalledWith(node, discordChannel);
        });
        it('accepts a TextChannel', () => {
            const textChannel = {};
            const runner = new DiscordPromptRunner_1.DiscordPromptRunner({}, {});
            const prompt = new DiscordPrompt_1.DiscordPrompt({ text: '' });
            const node = new DiscordPromptNode_1.DiscordPromptNode(prompt);
            const superRun = jest.spyOn(prompt_anything_1.PromptRunner.prototype, 'run')
                .mockImplementation();
            const convertedChannel = {
                foo: 'bar'
            };
            jest.spyOn(DiscordPromptRunner_1.DiscordPromptRunner, 'convertTextChannel')
                .mockReturnValue(convertedChannel);
            runner.run(node, textChannel);
            expect(superRun).toHaveBeenCalledWith(node, convertedChannel);
        });
    });
});
