"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MenuEmbed_1 = require("../MenuEmbed");
describe('Int::MenuEmbed', () => {
    describe('isValidSelection', () => {
        it('returns correctly for multiselect', () => {
            const menu = new MenuEmbed_1.MenuEmbed(undefined, {
                multiSelect: true
            });
            menu
                .addOption('a')
                .addOption('b')
                .addOption('c');
            expect(menu.isValidSelection('1,2,3'))
                .toEqual(true);
            expect(menu.isValidSelection('0,2,3'))
                .toEqual(false);
            expect(menu.isValidSelection('1,2,4'))
                .toEqual(false);
        });
        it('returns correctly for non-multiselect', () => {
            const menu = new MenuEmbed_1.MenuEmbed();
            menu
                .addOption('a')
                .addOption('b')
                .addOption('c');
            expect(menu.isValidSelection('1,2,3'))
                .toEqual(false);
            expect(menu.isValidSelection('1'))
                .toEqual(true);
        });
        it('works with ranges', () => {
            const menu = new MenuEmbed_1.MenuEmbed(undefined, {
                multiSelect: true
            });
            menu
                .addOption('a')
                .addOption('b')
                .addOption('c')
                .addOption('d')
                .addOption('e');
            expect(menu.isValidSelection('1,2-4'))
                .toEqual(true);
            expect(menu.isValidSelection('2-4,1'))
                .toEqual(true);
            expect(menu.isValidSelection('2-9, 1'))
                .toEqual(false);
            expect(menu.isValidSelection('2-4, 9'))
                .toEqual(false);
        });
    });
    describe('spansMultiplePages', () => {
        it('returns correctly for custom maxPerpage', () => {
            const menu = new MenuEmbed_1.MenuEmbed(undefined, {
                maxPerPage: 2
            });
            menu
                .addOption('a')
                .addOption('b')
                .addOption('c');
            expect(menu.spansMultiplePages())
                .toEqual(true);
            const menu2 = new MenuEmbed_1.MenuEmbed(undefined, {
                maxPerPage: 2
            });
            menu2
                .addOption('a');
            expect(menu2.spansMultiplePages())
                .toEqual(false);
        });
        it('returns correctly for default maxPerpage', () => {
            const menu = new MenuEmbed_1.MenuEmbed();
            menu
                .addOption('1')
                .addOption('2')
                .addOption('3')
                .addOption('4')
                .addOption('5')
                .addOption('6');
            expect(menu.spansMultiplePages())
                .toEqual(true);
            const menu2 = new MenuEmbed_1.MenuEmbed();
            menu2
                .addOption('1')
                .addOption('2')
                .addOption('3')
                .addOption('4');
            expect(menu2.spansMultiplePages())
                .toEqual(false);
        });
    });
});
