"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscordPromptRunner = void 0;
const prompt_anything_1 = require("prompt-anything");
const DiscordChannel_1 = require("./DiscordChannel");
/**
 * Runs a series of prompt nodes
 */
class DiscordPromptRunner extends prompt_anything_1.PromptRunner {
    /**
     * @param author User who started the prompt
     * @param data Initial data
     */
    constructor(author, data) {
        super(Object.assign(Object.assign({}, data), { __authorID: author.id }));
    }
    /**
     * Marks a channel as active
     *
     * @param id Channel ID
     */
    static addActiveChannel(id) {
        this.activeChannels.add(id);
    }
    /**
     * Unmarks a channel as active
     *
     * @param id Channel ID
     */
    static deleteActiveChannel(id) {
        this.activeChannels.delete(id);
    }
    /**
     * Check if a channel is currently running a prompt. This
     * should be called before running a prompt runner to
     * check if there are any active menus before running
     * a new one
     *
     * @param id Channel ID
     */
    static isActiveChannel(id) {
        return this.activeChannels.has(id);
    }
    /**
     * Convert a TextChannel to a DiscordChannel for
     * compatibility with prompt-anything
     *
     * @param channel
     */
    static convertTextChannel(channel) {
        return new DiscordChannel_1.DiscordChannel(channel);
    }
    /**
     * Start running prompts with the root PromptNode
     *
     * @param node Node that contains the starting prompt
     * @param channel Discord channel to send the prompts to
     */
    run(node, channel) {
        const _super = Object.create(null, {
            run: { get: () => super.run }
        });
        return __awaiter(this, void 0, void 0, function* () {
            let compatibleChannel;
            const channelID = channel.id;
            if (channel instanceof DiscordChannel_1.DiscordChannel) {
                compatibleChannel = channel;
            }
            else {
                compatibleChannel = DiscordPromptRunner.convertTextChannel(channel);
            }
            DiscordPromptRunner.addActiveChannel(channelID);
            const result = yield _super.run.call(this, node, compatibleChannel);
            DiscordPromptRunner.deleteActiveChannel(channelID);
            return result;
        });
    }
}
exports.DiscordPromptRunner = DiscordPromptRunner;
/**
 * Channel IDs that are currently running prompts
 */
DiscordPromptRunner.activeChannels = new Set();
