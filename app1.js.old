const Discord = require('discord.js');
const {
    Client,
    MessageEmbed
} = require('discord.js');
const mojangApi = require('mojang-api');
var cron = require('node-cron');
const rm = require('discord.js-reaction-menu')
const reactionrem = require('discord.js-remove-on-reaction')
const bot = new Discord.Client();
var MojangAPI = require('mojang-api');
const average = require('image-average-color');
const {
    Menu
} = require('discord.js-menu');
const rgbHex = require('rgb-hex');
var fs = require('fs'),
    request = require('request');
var date = new Date();
require('dotenv').config();
const PREFIX = '/';
var mysql = require('mysql');
const {
    resolve
} = require('dns');
const {
    get
} = require('http');
const { rejects } = require('assert');
var numPlayers = 0;
var playerNum = 0;
var foundPlayer = false;
var playerToUUID = 0;

var date = new Date();



var download = function(uri, filename, callback) {
    request.head(uri, function(err, res, body) {
        console.log('content-type:', res.headers['content-type']);
        console.log('content-length:', res.headers['content-length']);

        request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
    });
};

var connection = mysql.createConnection({

    host: 'localhost',
    user: 'discord',
    password: '2903ir02fjfwl3j&&#20',
    database: 'server_stats'

});


cron.schedule('*/30 * * * *', () => {
    console.log('running a task 30 minute');
    connection.query("SELECT * FROM C1", function(error, rows, fields) {
        if (!!error) {
            console.log('Error in the query');
        }
        for (let i = 0; i < numPlayers; i++) {
            MojangAPI.profile(rows[i].UUID, function(err, res) {
                var url = 'https://mc-heads.net/body/' + res.name + '.png';
                var destination = '/home/bardia/3d4hbot/' + res.name + '.png';

                download(url, destination, function() {
                    console.log('done');
                });

            })

        }
    });
    connection.query("SELECT * FROM C2", function(error, rows, fields) {
        if (!!error) {
            console.log('Error in the query');
        }
        for (let i = 0; i < numPlayers; i++) {
            MojangAPI.profile(rows[i].UUID, function(err, res) {
                var url = 'https://mc-heads.net/body/' + res.name + '.png';
                var destination = '/home/bardia/3d4hbot/' + res.name + '.png';

                download(url, destination, function() {
                    console.log('done');
                });

            })

        }
    });
});



function getExtClutcherStats(args, msg){
    return new Promise((resolve, reject) => {
        if (args[1].length > 16) {

            reject("Invalid Player Name");
            return;

        }
        connection.query("SELECT * FROM C3", function(error, rows, fields) {
            if (!!error) {
                reject('Error in the query');
            } 
            else {
                
                MojangAPI.nameToUuid(args[1], function(err, res) {

                    if (err) {
                        reject(err);
                    } else {
                        for (let i = 0; i < numPlayers; i++) {
                            if (res[0]) {
                                if (rows[i].UUID == args[1] || rows[i].UUID == res[0].id) {
                                    playerNum = i;
                                    foundPlayer = true;
                                    break;
                                }
                            }
                            var foundPlayer = false;

                        }

                        if (foundPlayer == false) {

                            reject("Either player does not exist, or they have not played on the specified gamemode");
                            return;

                        }


                        else if (foundPlayer == true) {

                            MojangAPI.profile(rows[playerNum].UUID, function(err, res) {

                                if (err)
                                    reject(err);
                                else {

                                    try {

                                        average(`/home/bardia/3d4hbot/${res.name}.png`, (err, color) => {
                                            if (err) throw err;
                                            var [red, green, blue, alpha] = color;
                                            var hexii = '#' + rgbHex(red, green, blue);
                                            if (foundPlayer == true) {
                                                var descSend = "```Blocks Placed: " + rows[playerNum].blocksPlaced + "```" + "\n" + "```Best Streak: " + rows[playerNum].bestStreak + "```" + "\n" + "```Current Streak: " + rows[playerNum].currentStreak + "```" + "\n" +"```Longest Extension: " + rows[playerNum].longestExtension + "```" + "\n" + "```Shards Earned: " + rows[playerNum].shardsEarned + "```" + "\n" + "```Successful Attempts: " + rows[playerNum].successfulAttempts + "```" + "\n" + "```Failed Attempts: " + rows[playerNum].failedAttempts + "```" + "\n";
                                                var extclutchEmbed = new Discord.MessageEmbed()
                                                    .setTitle(':straight_ruler: Extension Clutch')
                                                    .setDescription(descSend)
                                                    .setURL(`https://3d4h.world`)
                                                    .setColor(hexii)
                                                    .setAuthor(res.name, `https://mc-heads.net/head/${res.name}`, `https://namemc.com/profile/${res.name}`)
                                                    .setThumbnail(`https://mc-heads.net/body/${res.name}`)
                                                extembed = extclutchEmbed;
                                                resolve(extclutchEmbed)
                                                return
                                            }
                                            else{
                                                reject('Player Not Found');
                                                return
                                            }
                                        });


                                    } catch (error) {

                                        if (foundPlayer == true) {

                                            var straight 

                                            var descSend = "```Blocks Placed: " + rows[playerNum].blocksPlaced + "```" + "\n" + "```Best Streak: " + rows[playerNum].bestStreak + "```" + "\n" + "```Current Streak: " + rows[playerNum].currentStreak + "```" + "\n" +"```Best Time: " + rows[playerNum].bestTime + "```" + "\n" + "```Shards Earned: " + rows[playerNum].shardsEarned + "```" + "\n" + "```Successful Attempts: " + rows[playerNum].successfulAttempts + "```" + "\n" + "```Failed Attempts: " + rows[playerNum].failedAttempts + "```" + "\n";
                                            const extclutchEmbed = new Discord.MessageEmbed()
                                                .setTitle(':straight_ruler: Omni Clutch')
                                                .setDescription(descSend)
                                                .setURL(`https://3d4h.world`)
                                                .setColor('#FF00FF')
                                                .setAuthor(res.name, `https://mc-heads.net/head/${res.name}`, `https://namemc.com/profile/${res.name}`)
                                                .setThumbnail(`https://mc-heads.net/body/${res.name}/300`);
                                            resolve(extclutchEmbed)
                                            return extclutchEmbed;
                                        }
                                        else{
                                            reject('Player Not Found');
                                            return
                                        }


                                    }
                                }

                            })
                        }
                        else{
                            reject('Player Not Found');
                            return
                        }
                    }









                });
            }

            });
    });
}


function getOmniClutcherStats(args, msg){

    return new Promise((resolve, reject) => {
    
    if (args[1].length > 16) {

        reject("Invalid Player Name");
        return;

    }
    connection.query("SELECT * FROM C2", function(error, rows, fields) {
        if (!!error) {
            reject('Error in the query');
        } 
        else {
            
            MojangAPI.nameToUuid(args[1], function(err, res) {

                if (err) {
                    reject(err);
                } else {
                    for (let i = 0; i < numPlayers; i++) {
                        if (res[0]) {
                            if (rows[i].UUID == args[1] || rows[i].UUID == res[0].id) {
                                playerNum = i;
                                foundPlayer = true;
                                break;
                            }
                        }
                        var foundPlayer = false;

                    }

                    if (foundPlayer == false) {

                        reject("Either player does not exist, or they have not played on the specified gamemode");
                        return;

                    }


                    else if (foundPlayer == true) {

                        MojangAPI.profile(rows[playerNum].UUID, function(err, res) {

                            if (err)
                                reject(err);
                            else {

                                try {

                                    average(`/home/bardia/3d4hbot/${res.name}.png`, (err, color) => {
                                        if (err) throw err;
                                        var [red, green, blue, alpha] = color;
                                        var hexii = '#' + rgbHex(red, green, blue);
                                        if (foundPlayer == true) {
                                            var descSend = "```Blocks Placed: " + rows[playerNum].blocksPlaced + "```" + "\n" + "```Best Streak: " + rows[playerNum].bestStreak + "```" + "\n" + "```Current Streak: " + rows[playerNum].currentStreak + "```" + "\n" +"```Best Time: " + rows[playerNum].bestTime + "```" + "\n" + "```Shards Earned: " + rows[playerNum].shardsEarned + "```" + "\n" + "```Successful Attempts: " + rows[playerNum].successfulAttempts + "```" + "\n" + "```Failed Attempts: " + rows[playerNum].failedAttempts + "```" + "\n";
                                            var omniclutchEmbed = new Discord.MessageEmbed()
                                                .setTitle(':atom: Omni Clutch')
                                                .setDescription(descSend)
                                                .setURL(`https://3d4h.world`)
                                                .setColor(hexii)
                                                .setAuthor(res.name, `https://mc-heads.net/head/${res.name}`, `https://namemc.com/profile/${res.name}`)
                                                .setThumbnail(`https://mc-heads.net/body/${res.name}`)
                                            resolve(omniclutchEmbed);
                                            return;
                                        }
                                        else{
                                            reject('Player Not Found');
                                            return
                                        }
                                    });


                                } catch (error) {

                                    if (foundPlayer == true) {


                                        var descSend = "```Blocks Placed: " + rows[playerNum].blocksPlaced + "```" + "\n" + "```Best Streak: " + rows[playerNum].bestStreak + "```" + "\n" + "```Current Streak: " + rows[playerNum].currentStreak + "```" + "\n" +"```Best Time: " + rows[playerNum].bestTime + "```" + "\n" + "```Shards Earned: " + rows[playerNum].shardsEarned + "```" + "\n" + "```Successful Attempts: " + rows[playerNum].successfulAttempts + "```" + "\n" + "```Failed Attempts: " + rows[playerNum].failedAttempts + "```" + "\n";
                                        const omniclutchEmbed = new Discord.MessageEmbed()
                                            .setTitle(':atom: Omni Clutch')
                                            .setDescription(descSend)
                                            .setURL(`https://3d4h.world`)
                                            .setColor('#FF00FF')
                                            .setAuthor(res.name, `https://mc-heads.net/head/${res.name}`, `https://namemc.com/profile/${res.name}`)
                                            .setThumbnail(`https://mc-heads.net/body/${res.name}/300`);
                                        resolve(omniclutchEmbed);
                                        return;
                                    }
                                    else{
                                        reject('Player Not Found');
                                        return
                                    }


                                }
                            }

                        })
                    }
                    else{
                        reject('Player Not Found');
                        return
                    }
                }









            });
        }

    });

    });

}

function getBridgeClutcherStats(args, msg) {
    
    return new Promise((resolve, reject) => {

    if (args[1].length > 16) {

        reject("Invalid Player Name");
        return;


    }
    connection.query("SELECT * FROM C1", function(error, rows, fields) {
        if (!!error) {
            reject('Error in the query');
        } else {

            MojangAPI.nameToUuid(args[1], function(err, res) {

                if (err) {
                    reject(err);
                } else {
                    for (let i = 0; i < numPlayers; i++) {
                        if (res[0]) {
                            if (rows[i].UUID == args[1] || rows[i].UUID == res[0].id) {
                                playerNum = i;
                                foundPlayer = true;
                                break;
                            }
                        }
                        var foundPlayer = false;

                    }

                    if (foundPlayer == false) {

                        reject("Either player does not exist, or they have not played on the specified gamemode");
                        return;

                    }


                    else if (foundPlayer == true) {

                        MojangAPI.profile(rows[playerNum].UUID, function(err, res) {

                            if (err)
                                reject(err);
                            else {

                                try {

                                    average(`/home/bardia/3d4hbot/${res.name}.png`, (err, color) => {
                                        if (err) throw err;
                                        var [red, green, blue, alpha] = color;
                                        var hexii = '#' + rgbHex(red, green, blue);
                                        if (foundPlayer == true) {
                                            var descSend = "```Blocks Placed: " + rows[playerNum].blocksPlaced + "```" + "\n" + "```Best Streak: " + rows[playerNum].bestStreak + "```" + "\n" + "```Current Streak: " + rows[playerNum].currentStreak + "```" + "\n" +"```Best Time: " + rows[playerNum].bestTime + "```" + "\n" + "```Shards Earned: " + rows[playerNum].shardsEarned + "```" + "\n" + "```Successful Attempts: " + rows[playerNum].successfulAttempts + "```" + "\n" + "```Failed Attempts: " + rows[playerNum].failedAttempts + "```" + "\n";
                                            var bridgeclutchEmbed = new Discord.MessageEmbed()
                                                .setTitle(':bricks: Bridge Clutch')
                                                .setDescription(descSend)
                                                .setURL(`https://3d4h.world`)
                                                .setColor(hexii)
                                                .setAuthor(res.name, `https://mc-heads.net/head/${res.name}`, `https://namemc.com/profile/${res.name}`)
                                                .setThumbnail(`https://mc-heads.net/body/${res.name}`)
                                            resolve(bridgeclutchEmbed);
                                            return;
                                        }
                                        else{
                                            reject('Player Not Found');
                                            return
                                        }
                                    });


                                } catch (error) {

                                    if (foundPlayer == true) {

                                    


                                        var descSend = "```Blocks Placed: " + rows[playerNum].blocksPlaced + "```" + "\n" + "```Best Streak: " + rows[playerNum].bestStreak + "```" + "\n" + "```Current Streak: " + rows[playerNum].currentStreak + "```" + "\n" +"```Best Time: " + rows[playerNum].bestTime + "```" + "\n" + "```Shards Earned: " + rows[playerNum].shardsEarned + "```" + "\n" + "```Successful Attempts: " + rows[playerNum].successfulAttempts + "```" + "\n" + "```Failed Attempts: " + rows[playerNum].failedAttempts + "```" + "\n";
                                        const bridgeclutchEmbed = new Discord.MessageEmbed()
                                            .setTitle(':bricks: Bridge Clutch')
                                            .setDescription(descSend)
                                            .setURL(`https://3d4h.world`)
                                            .setColor('#FF00FF')
                                            .setAuthor(res.name, `https://mc-heads.net/head/${res.name}`, `https://namemc.com/profile/${res.name}`)
                                            .setThumbnail(`https://mc-heads.net/body/${res.name}/300`);
                                            bridgeembed = bridgeclutchEmbed;
                                            resolve(bridgeclutchEmbed);
                                            return;
                                    }
                                    else{
                                        reject('Player Not Found');
                                        return
                                    }


                                }
                            }

                        })
                    }

                    else{
                        reject('Player Not Found');
                        return
                    }
                }


            });




        }

    });

    });




}
async function displayEmbed(args, msg) {
    try {

            
        try {
            var extembed = await getExtClutcherStats(args, msg);


            var bridgeembed = await getBridgeClutcherStats(args, msg);
        

            var omniembed = await getOmniClutcherStats(args, msg);
            
        } catch (error) {

            msg.channel.send(error);
            
        }

            var desccc = "```Bridge Clutch: 🧱```\n" + "```Omni Clutch: ⚛```\n" + "```Extension Clutch: 📏```\n";

            const mainembed = new MessageEmbed({
                title: "Please Choose a Gamemode",
                description: desccc,
                url: "https://3d4h.world",
                color: 16711935,
                author: {
                    name: args[1],
                    url: `https://namemc.com/profile/${args[1]}`,
                    icon_url: `https://mc-heads.net/body/${args[1]}`
                }
            })   

            const options = {
                limit: 15 * 1000,
                min: 1,
                max: 4, 
                page: 1
            }
            
            const m = await msg.channel.send(mainembed);

            await m.react('🚫');
            await m.react('🧱');
            await m.react('⚛');     
            await m.react('📏');  
                    
            const filter = (reaction, user) => {
                return ['🚫', '🧱', '⚛', '📏'].includes(reaction.emoji.name) && user.id == msg.author.id;
            };
            
            /*const removeReaction = async (m, msg, emoji) => {
                try { 
                   await m.reactions.find(r => r.emoji.name == emoji).users.remove(msg.author.id); 
                } catch(err) {}
            }
            */
            
            async function awaitReactions(msg, m, options, filter){

                const { min, max, page, limit } = options;
                
                m.awaitReactions(filter, { max: 1, time: limit, errors: ['time'] })
                .then(async (collected) => {

                    
                    const reaction = collected.first();


                    if (reaction.emoji.name === '🚫') {
                        return await m.delete();       
                    }
                    else if (reaction.emoji.name === '🧱') {

                        await m.edit(bridgeembed);  

                        const userReactions = m.reactions.cache.filter(reaction => reaction.users.cache.has(msg.author.id));
                        try {
                            for (const reaction of userReactions.values()) {
                                await reaction.users.remove(msg.author.id);
                            }
                        } catch (error) {
                            console.error('Failed to remove reactions.');
                        }                        
                    
                        awaitReactions(msg, m, options, filter);

                    }
                    else if (reaction.emoji.name === '⚛') {

                        await m.edit(omniembed);

                        const userReactions = m.reactions.cache.filter(reaction => reaction.users.cache.has(msg.author.id));
                        try {
                            for (const reaction of userReactions.values()) {
                                await reaction.users.remove(msg.author.id);
                            }
                        } catch (error) {
                            console.error('Failed to remove reactions.');
                        }
                        
                        awaitReactions(msg, m, options, filter);

                    }
                    else if (reaction.emoji.name === '📏') {

                        await m.edit(extembed);

                        const userReactions = m.reactions.cache.filter(reaction => reaction.users.cache.has(msg.author.id));
                        try {
                            for (const reaction of userReactions.values()) {
                                await reaction.users.remove(msg.author.id);
                            }
                        } catch (error) {
                            console.error('Failed to remove reactions.');
                        }

                        awaitReactions(msg, m, options, filter);

                    }
                    else {
                        awaitReactions(msg, m, options, filter);
                    }
                    





                }).catch(() => {});
            
            
            }

            await awaitReactions(msg, m, options, filter);
            
            
    } catch (error) {
        console.log(error);
    }


}

bot.on('ready', () => {

    bot.user.setActivity("play.3d4h.world", {
        type: "PLAYING"
    });

    console.log(`Logged in as ${bot.user.tag}`);
    connection.connect(function(error) {
        if (!!error) {
            console.log('Error');
        } else {
            console.log('Connected');
        }
    })

    //Get Number Of Saved Players
    connection.query("SHOW TABLE STATUS", function(error, rows, fields) {

        if (!!error) {
            console.log('Error in the query');
        } else {
            console.log('Successful query');
            console.log(rows[0].Rows);
            numPlayers = rows[0].Rows;

        }
    });




});

bot.on('message', msg => {
      

    if (msg.author.bot) return;

    if (msg.content == '/stats') {
        const helpEmbed = new Discord.MessageEmbed()
            .setTitle("Help - Stats")
            .setDescription("```Get Player Stats: /stats <player>```\n")
            .setURL("https://3d4h.world")
            .setColor("#FF00FF")
        msg.channel.send(helpEmbed);
        return;
    }

    let args = msg.content.substring(PREFIX.length).split(" ");

    if (msg.content == '/stats help') {
	const helpEmbed = new Discord.MessageEmbed()
                .setTitle("Help - Stats")
                .setDescription("```Get Player Stats: /stats <player>```\n")
                .setURL("https://3d4h.world")
                .setColor("#FF00FF")
            msg.channel.send(helpEmbed);
            return;


    }
    if (args[0] == 'stats') {

        if (!args[0]) {
            const helpEmbed = new Discord.MessageEmbed()
                .setTitle("Help - Stats")
                .setDescription("```Get Player Stats: /stats <player>```\n")
                .setURL("https://3d4h.world")
                .setColor("#FF00FF")
            msg.channel.send(helpEmbed);
            return;
        }
        
        displayEmbed(args, msg);

        
    }

    if (args[0] == 'help') {

        const helpEmbed = new Discord.MessageEmbed()
            .setTitle("Help - Stats")
            .setDescription("```Get Player Stats: /stats <player>```\n")
            .setURL("https://3d4h.world")
            .setColor("#FF00FF")
        msg.channel.send(helpEmbed);
    }


});

bot.login(process.env.TOKEN);